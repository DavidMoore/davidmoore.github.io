<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Test on Sad Robot</title>
    <link>http://www.sadrobot.co.nz/tags/unit-test/</link>
    <description>Recent content in Unit Test on Sad Robot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jun 2009 10:50:15 +0000</lastBuildDate>
    
	<atom:link href="http://www.sadrobot.co.nz/tags/unit-test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit testing multi-threaded, asynchronous code and/or events</title>
      <link>http://www.sadrobot.co.nz/blog/2009/06/03/unit-testing-multi-threaded-asynchronous-code-andor-events/</link>
      <pubDate>Wed, 03 Jun 2009 10:50:15 +0000</pubDate>
      
      <guid>http://www.sadrobot.co.nz/blog/2009/06/03/unit-testing-multi-threaded-asynchronous-code-andor-events/</guid>
      <description>I&amp;rsquo;ve been writing some unit tests recently that test some multi-threaded functionality. Typically this involves hooking up some event handlers then waiting for some asynchronous code to fire the event before proceeding with the unit test and assertions. The ManualResetEvent class (MSDN) seems a good choice for this, and this post has a small example of using it in a unit test:   [Test()] public void AfterRunAsync() { ManualResetEvent manualEvent = new ManualResetEvent(false); TestTestCase tc = new TestTestCase(1, &amp;ldquo;&amp;rdquo;, 0, 0); bool eventFired = false; tc.</description>
    </item>
    
  </channel>
</rss>