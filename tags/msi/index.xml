<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Msi on Sad Robot</title>
    <link>http://www.sadrobot.co.nz/tags/msi/</link>
    <description>Recent content in Msi on Sad Robot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Mar 2013 09:44:14 +0000</lastBuildDate>
    
	<atom:link href="http://www.sadrobot.co.nz/tags/msi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows Installer custom actions, UAC and elevation</title>
      <link>http://www.sadrobot.co.nz/blog/2013/03/01/windows-installer-custom-actions-uac-and-elevation/</link>
      <pubDate>Fri, 01 Mar 2013 09:44:14 +0000</pubDate>
      
      <guid>http://www.sadrobot.co.nz/blog/2013/03/01/windows-installer-custom-actions-uac-and-elevation/</guid>
      <description>We had a problem this week where a merge module from a third party was causing our installer to fail under UAC.
The installation was being elevated, but the custom actions (which were doing things such as file system and registry operations) were still failing due to security exceptions.
The root cause was that the merge module contained custom actions that were still not being run under the elevated account.</description>
    </item>
    
    <item>
      <title>HOW TO: Detect if the Visual C&#43;&#43; 2010 redistributable package is installed with WiX</title>
      <link>http://www.sadrobot.co.nz/blog/2010/06/30/how-to-detect-if-the-visual-c-2010-redistributable-package-is-installed-with-wix-2/</link>
      <pubDate>Wed, 30 Jun 2010 17:09:49 +0000</pubDate>
      
      <guid>http://www.sadrobot.co.nz/blog/2010/06/30/how-to-detect-if-the-visual-c-2010-redistributable-package-is-installed-with-wix-2/</guid>
      <description>As noted by Aaron Stebner, there is now a registry key you can search for to detect if the Visual C++ 2010 redistributable package is installed a machine, when installing your application.
There are 3 different (but very similar) registry keys for each of the 3 platform packages. Each key has a DWORD value called &amp;ldquo;Installed&amp;rdquo; with a value of 1.
 HKLMSOFTWAREMicrosoftVisualStudio10.0VCVCRedistx86 HKLMSOFTWAREMicrosoftVisualStudio10.0VCVCRedistx64 HKLMSOFTWAREMicrosoftVisualStudio10.0VCVCRedistia64  Here&amp;rsquo;s an example of using this in WiX, detecting the presence of the x86 version of the redistributable:</description>
    </item>
    
    <item>
      <title>HOW TO: Debug a Windows Installer custom action</title>
      <link>http://www.sadrobot.co.nz/blog/2010/06/28/how-to-debug-a-windows-installer-custom-action/</link>
      <pubDate>Mon, 28 Jun 2010 10:53:58 +0000</pubDate>
      
      <guid>http://www.sadrobot.co.nz/blog/2010/06/28/how-to-debug-a-windows-installer-custom-action/</guid>
      <description>Prerequisites:  Determine the name of the custom action you want to debug Ensure you have the source code and debug symbols for your custom action  Steps  Set the MsiBreak environment variable (user or system) to the name of the custom action. For example:
&amp;lt;br /&amp;gt; Setx MsiBreak &amp;lt;strong&amp;gt;MyCustomActionName&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/strong&amp;gt;
 Run your installer
 At the point where your custom action is about to run, you should get this message box prompt:</description>
    </item>
    
  </channel>
</rss>