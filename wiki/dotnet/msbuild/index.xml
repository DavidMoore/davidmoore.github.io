<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MSBuild on Sad Robot</title>
    <link>http://www.sadrobot.co.nz/wiki/dotnet/msbuild/</link>
    <description>Recent content in MSBuild on Sad Robot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Apr 2019 19:40:44 +1200</lastBuildDate>
    
	<atom:link href="http://www.sadrobot.co.nz/wiki/dotnet/msbuild/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Async Tasks</title>
      <link>http://www.sadrobot.co.nz/wiki/dotnet/msbuild/async-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.sadrobot.co.nz/wiki/dotnet/msbuild/async-tasks/</guid>
      <description>Async Tasks You can use async in MSBuild tasks using a pattern like this:
public class MyCustomTask : Task { public override bool Execute() { return ExecuteAsync().GetAwaiter().GetResult(); } protected async Task&amp;lt;bool&amp;gt; ExecuteAsync() { // Async / await code goes here // Return the result return true; } }  Here, the default Task Execute implementation simply calls an async method (in a synchronous manner obviously).
This allows you to consume APIs that expose async methods, as the async/await becomes more pervasive.</description>
    </item>
    
  </channel>
</rss>